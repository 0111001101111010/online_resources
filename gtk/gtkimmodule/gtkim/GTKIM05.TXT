第5章 付録

§GtkIMContextの要点
 下記は私が以前にメーリングリストに投稿したものを編集した文章です。とりあえず下
記を読めばGtkIMContextの要点はつかめます。
 普通のGTK+のアプリケーションレベルではGtkIMContextを直接扱うことはないと思われ
ますが、アプリケーションレベルで見ることができる限界はGtkIMContextです。その下
にいくつかのimmoduleがあり、immoduleは自己完結しているかもしれないし、XIMを呼び
出すかもしれません。
 immoduleは切り替え可能です。XIMレベルでは、IMの切り替えはできませんが(私が知ら
ないだけかもしれません...)、CannaのためのimmoduleとFreeWnnのためのimmoduleがあ
れば、CannaとFreeWnnを切り替え可能になります。同様にcWnnとかkWnn、ATOKなどに対
応するimmoduleを作れば、それらも切り替え可能になります。
 immoduleは完全に整備されているとは言えず、開拓の余地がある分野です。まともなド
キュメントは無く、ソースをHackしながら前に進む必要があります。
 gtk_im_multicontext_append_menuitemsでimmoduleを切り替えるためのGtkMenuItemを
GtkMenuShellに生成できます。
 アプリケーションはkey-press-eventとkey-release-eventイベントで
gtk_im_context_filter_keypressを呼ぶ必要があります。TRUEを返せば、キー入力は
GtkIMContextで処理されています。FALSEならば未処理です。
 アルファベット1文字でも、gtk_im_context_filter_keypressで処理されます。
 gtk_im_context_set_use_preeditをTRUE(デフォルト)にするならば、入力が確定してい
ない文字列はアプリケーション側がpreedit-changedシグナルに応じて自力で表示しなけ
ればなりません。gtk_im_context_get_preedit_stringでその文字列を取得できます。
 FALSEならば、アプリケーション側にその責任はなく、GtkIMContext側で適当に表示し
てくれます。たぶんそれは各々のimmoduleの仕事になります。(この仕事の品質は本当に
適当なのでTRUEにして自力で描画する方が良いでしょう)
 確定したならば、commitシグナルが発生します。日本語入力に限らず、アルファベット
1文字でも、commitシグナルになります。
 surroundingですが、これは周囲の文字のことです。日本語ではおそらく必要ないと思
われます。しかし高機能なInputMethodでは周囲の文字から最適な変換候補を選ぶような
機能があるハズで、そういう機能を生かすためにこれが使えるかもしれません。
 あるいは、言語によっては周囲の文字が現在の入力を決定するのに必要なのかもしれま
せん。GTK+-2.2のリファレンスマニュアルにはタイ語が挙げられています。
 例えば、「イワモトカスキ」という文字列があり、「ス」と「キ」の間にカーソルがあ
るならば gtk_im_context_set_surrounding (context, "イワモトカスキ", -1, 18);と
なるります。周囲の文字が必要ならばretrieve-surroundingシグナルが発生します。
 delete-surroundingシグナルは、例えば既に「イワモトカスキ」という文字列があり、
カーソルが「ス」と「キ」の間にあり、「゛」が入力されたならば、arg1は-1、arg2は1
になるかもしれません。その後で、commitシグナルで「ズ」が確定されます。
 強引に日本語的に解釈すれば、こういうことになると思います。タイ語などではこうい
う処理が必要と思われます(本当ですか?)。結局のところ、私に言語の知識がないので何
とも言えません。
 なお、上記の私のGtkIMContextに対する認識は間違っているかもしれません。



§GtkIMContextの問題点
 immoduleの切り替えにgtk_im_multicontext_append_menuitemsでメニューを作る方法し
か用意されていないのは悲しすぎます。WindowsのAlt+Shiftみたいにキーで切り替えた
り、あるいは他のそのアプリケーションに適する手段を実装できる余地があれば良いの
ですが。
 しかもimmoduleの選択は、特定のGtkIMContextの実体だけに有効ではなく、アプリケー
ションに固有です。それなのにGtkIMContextの実体からメニューを生成する仕様は変で
す。
 これはGtkIMContextに限った問題ではありませんが、文字列の中の位置の値を指定する
場合、単位が文字とバイトが混在しています。1文字が常に1バイトならば問題はありま
せんが、実際には、特にGtkIMContextを必要とするような環境では1文字は1バイトでは
ありません。
 一貫しないAPIの仕様はプログラマの負担を増加させています。
 現在の仕様ではpreeditの表示はアプリケーションがすべて行うか、あるいはimmodule
がすべて行うか以外に選択肢がありません。実際、preeditの表示は誰が行っても、結局
は私が第2章で示したサンプルのような仕様になると思います。ですから、これはGTK+側
で実装しておけば、双方の負担は軽くなります。また一貫したユーザーインターフェイ
スを提供できます。(もちろん、それに頼らずに、アプリケーションやimmdoleが独自に
対応するのは良いことです)
 APIもいろいろと不足していると思います。例えば現在の変換候補のリストを取得する
APIや、現在の状態(ローマ字カナとか英数字とか)を取得するAPIがあっても良いと思い
ます。
